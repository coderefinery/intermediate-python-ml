{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a55a3042",
   "metadata": {},
   "source": [
    "# Hands-on: RNA Expression Analysis - alternative method\n",
    "\n",
    "## Objectives\n",
    "\n",
    "* Examine differential expression of immune-related genes between patient groups previously classified as immunologically strong ('istrong') and immunologically weak ('iweak')\n",
    "* Apply an alternative analytical approach using Z-ratio methodology to complement standard differential expression tools like DESeq\n",
    "* Ranks immune-related genes based on their relative expression differences between the patient groups\n",
    "\n",
    "## RNA Expression Analysis Steps:\n",
    "\n",
    "1. **Data Loading and visualization**\n",
    "   - Load sample group information (iweak vs istrong)\n",
    "   - Load gene expression count matrix\n",
    "   - View first few rows/columns\n",
    "   - View basic info\n",
    "\n",
    "2. **Sample Identification**\n",
    "   - Filter samples by group (iweak/istrong)\n",
    "   - Match count matrix columns with sample IDs\n",
    "\n",
    "3. **Data Preprocessing**\n",
    "   - Convert count matrix to numeric values\n",
    "   - Apply log2 transformation: log2(counts + 1)\n",
    "\n",
    "4. **Statistical Analysis**\n",
    "   - Calculate mean and std for each gene within each group\n",
    "   - Compute Z-scores within each sample group\n",
    "   - Calculate Z-score differences between groups\n",
    "   - Compute standard deviation of all differences\n",
    "\n",
    "5. **Ranking Genes**\n",
    "   - Calculate Z-ratio: difference / std_difference\n",
    "   - Rank genes by Z-ratio (highest to lowest)\n",
    "\n",
    "This workflow standardizes the comparison between sample groups by accounting for the overall variability in gene expression across the entire experiment.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "830a6267",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4910350b",
   "metadata": {},
   "source": [
    "## 1. **Data Loading and visualization**\n",
    "\n",
    "* Load sample group information (iweak vs istrong)\n",
    "* Load gene expression count matrix\n",
    "* View first few rows/columns\n",
    "* View basic info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de3db88c",
   "metadata": {},
   "source": [
    "### Load sample group information (iweak vs istrong)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6a3516e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Samples and Groups:\n",
      "         Sample    Group\n",
      "0  SH_TS_BC111    iweak\n",
      "1  SH_TS_BC112    iweak\n",
      "2  SH_TS_BC113    iweak\n",
      "3  SH_TS_BC119  istrong\n",
      "4  SH_TS_BC133    iweak\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 303 entries, 0 to 302\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Sample  303 non-null    object\n",
      " 1   Group   303 non-null    object\n",
      "dtypes: object(2)\n",
      "memory usage: 4.9+ KB\n",
      "Dataframe info:\n",
      " None\n",
      "\n",
      "Number of samples in each group:\n",
      "Group\n",
      "istrong    154\n",
      "iweak      149\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "sample_info = pd.read_csv(\n",
    "    \"test_data/Sample_group_info.csv\", header=None, names=[\"Sample\", \"Group\"]\n",
    ")\n",
    "print(\"Samples and Groups:\\n\", sample_info.head())\n",
    "print(\"Dataframe info:\\n\", sample_info.info())\n",
    "print(\"\\nNumber of samples in each group:\")\n",
    "print(sample_info.groupby(by=\"Group\").size())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b2d7341",
   "metadata": {},
   "source": [
    "### Load gene expression count matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2a41ad5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count matrix:\n",
      "           SH_TS_BC_C1  SH_TS_BC_C11  SH_TS_BC_C15  SH_TS_BC_C3  SH_TS_BC01\n",
      "Gene                                                                      \n",
      "ACTR3B             25           559           231           44          23\n",
      "ANLN              173          2475           886          320           6\n",
      "APOBEC3G          114          8806          2781          537          47\n",
      "AURKA             626          7492          2829          564          14\n",
      "BAG1              317          5949          2357          275          26\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 80 entries, ACTR3B to VEGFA\n",
      "Columns: 483 entries, SH_TS_BC_C1 to UNC_TGS_BC_Y90_R1\n",
      "dtypes: int64(483)\n",
      "memory usage: 302.5+ KB\n",
      "Dataframe info:\n",
      " None\n",
      "Descriptive statistics (First 5 samples):\n",
      "         SH_TS_BC_C1  SH_TS_BC_C11  SH_TS_BC_C15   SH_TS_BC_C3   SH_TS_BC01\n",
      "count     80.000000      80.00000     80.000000     80.000000    80.000000\n",
      "mean    1118.700000   20114.17500   6846.137500   1403.150000   126.212500\n",
      "std     2627.440095   42620.73209  13895.968032   2411.549117   329.326881\n",
      "min        1.000000      13.00000      6.000000      0.000000     0.000000\n",
      "25%       58.500000    1758.50000    692.500000    207.000000     3.750000\n",
      "50%      265.000000    5481.00000   1903.500000    529.000000    22.000000\n",
      "75%      849.500000   15620.50000   5396.750000   1142.000000   100.250000\n",
      "max    15912.000000  239031.00000  79955.000000  12397.000000  2352.000000\n"
     ]
    }
   ],
   "source": [
    "count_matrix = pd.read_csv(\n",
    "    \"test_data/count_matrix_with_row_indices.csv\", header=0, index_col=0, sep=\";\"\n",
    ")\n",
    "print(\"Count matrix:\\n\", count_matrix.iloc[:, :5].head())\n",
    "print(\"Dataframe info:\\n\", count_matrix.info())\n",
    "print(\n",
    "    \"Descriptive statistics (First 5 samples):\\n\", count_matrix.iloc[:, :5].describe()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f23250ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NaN values in each column: SH_TS_BC_C1          0\n",
      "SH_TS_BC_C11         0\n",
      "SH_TS_BC_C15         0\n",
      "SH_TS_BC_C3          0\n",
      "SH_TS_BC01           0\n",
      "                    ..\n",
      "UNC_TGS_BC_9m        0\n",
      "UNC_TGS_BC_Y23       0\n",
      "UNC_TGS_BC_Y23_R1    0\n",
      "UNC_TGS_BC_Y90       0\n",
      "UNC_TGS_BC_Y90_R1    0\n",
      "Length: 483, dtype: int64\n",
      "Number of NaN values in the dataframe: 0\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of NaN values in each column:\", count_matrix.isna().sum(0))\n",
    "print(\"Number of NaN values in the dataframe:\", count_matrix.isna().sum(0).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41c23d6b",
   "metadata": {},
   "source": [
    "## 2. **Sample Identification**\n",
    "\n",
    "* Filter samples by group (iweak/istrong)\n",
    "* Match count matrix columns with sample IDs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88265476",
   "metadata": {},
   "source": [
    "### Filter samples and match count matrix - iweak"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7971431",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iweak samples:\n",
      "        Sample  Group\n",
      "0  SH_TS_BC111  iweak\n",
      "1  SH_TS_BC112  iweak\n",
      "2  SH_TS_BC113  iweak\n",
      "4  SH_TS_BC133  iweak\n",
      "5  SH_TS_BC134  iweak\n",
      "Number of iweak samples: 149\n",
      "iweak samples:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 149 entries, 0 to 302\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Sample  149 non-null    object\n",
      " 1   Group   149 non-null    object\n",
      "dtypes: object(2)\n",
      "memory usage: 3.5+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Display info about iweak samples\n",
    "iweak_samples = sample_info[sample_info[\"Group\"] == \"iweak\"]\n",
    "print(\"iweak samples:\")\n",
    "print(iweak_samples.head())\n",
    "print(\"Number of iweak samples:\", len(iweak_samples))\n",
    "# Display info about iweak samples\n",
    "print(\"iweak samples:\")\n",
    "print(iweak_samples.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "011a7ee2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Samples in count matrix (first 10):\n",
      " Index(['SH_TS_BC_C1', 'SH_TS_BC_C11', 'SH_TS_BC_C15', 'SH_TS_BC_C3',\n",
      "       'SH_TS_BC01', 'SH_TS_BC010_1', 'SH_TS_BC010_2', 'SH_TS_BC02',\n",
      "       'SH_TS_BC04', 'SH_TS_BC05'],\n",
      "      dtype='object')\n",
      "Data Type of count_matrix.columns: <class 'pandas.core.indexes.base.Index'>\n"
     ]
    }
   ],
   "source": [
    "# Identify columns that match iweak sample IDs\n",
    "print(\"Samples in count matrix (first 10):\\n\", count_matrix.columns[:10])\n",
    "print(\"Data Type of count_matrix.columns:\", type(count_matrix.columns))\n",
    "\n",
    "## `pandas.core.indexes.base.Index` is not a NumPy ndarray, but it is built on top of NumPy arrays.\n",
    "## In other words, while a Pandas Index can store data in a way that is compatible with NumPy\n",
    "## `pandas.core.indexes.base.Index`  it is a separate object that provides additional functionality specific to indexing and more complex operations suited for Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2afdf7c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iweak column mask (first 10):\n",
      "[False False False False False False False False False False]\n",
      "Number of iweak columns in iweak column mask: 54\n",
      "\n",
      "iweak column mask (first 30): [False False False False False False False False False False False False\n",
      " False False False False False False False False False False False False\n",
      " False  True  True  True False False]\n",
      "First 30 columns of iweak: Index(['SH_TS_BC111', 'SH_TS_BC112', 'SH_TS_BC113', 'SH_TS_BC133',\n",
      "       'SH_TS_BC134', 'SH_TS_BC139', 'SH_TS_BC141', 'SH_TS_BC146',\n",
      "       'SH_TS_BC147', 'SH_TS_BC152', 'SH_TS_BC154', 'SH_TS_BC155',\n",
      "       'SH_TS_BC160', 'SH_TS_BC161', 'SH_TS_BC163', 'SH_TS_BC169',\n",
      "       'SH_TS_BC172', 'SH_TS_BC173', 'SH_TS_BC176', 'SH_TS_BC181',\n",
      "       'SH_TS_BC183', 'SH_TS_BC184', 'SH_TS_BC185', 'SH_TS_BC196',\n",
      "       'SH_TS_BC198', 'SH_TS_BC200', 'SH_TS_BC203', 'SH_TS_BC207',\n",
      "       'SH_TS_BC210', 'SH_TS_BC212'],\n",
      "      dtype='object')       \n",
      " Total number of iweak columns: 54\n"
     ]
    }
   ],
   "source": [
    "iweak_cols = count_matrix.columns.isin(iweak_samples[\"Sample\"])\n",
    "print(\"iweak column mask (first 10):\")\n",
    "print(iweak_cols[:10])\n",
    "print(\"Number of iweak columns in iweak column mask:\", iweak_cols.sum())\n",
    "# print(\"Number of iweak columns in count matrix:\", len(iweak_cols[iweak_cols]))\n",
    "print(\"\\niweak column mask (first 30):\", iweak_cols[:30])\n",
    "print(\n",
    "    f\"First 30 columns of iweak: {count_matrix.columns[iweak_cols][:30]} \\\n",
    "      \\n Total number of iweak columns: {len(count_matrix.columns[iweak_cols])}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f410732e",
   "metadata": {},
   "source": [
    "### Filter samples and match count matrix - istrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52856180",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "istrong samples:\n",
      "         Sample    Group\n",
      "3   SH_TS_BC119  istrong\n",
      "10  SH_TS_BC150  istrong\n",
      "11  SH_TS_BC151  istrong\n",
      "13  SH_TS_BC153  istrong\n",
      "19  SH_TS_BC165  istrong\n",
      "Number of iweak samples: 154\n",
      "iweak samples:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 154 entries, 3 to 301\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   Sample  154 non-null    object\n",
      " 1   Group   154 non-null    object\n",
      "dtypes: object(2)\n",
      "memory usage: 3.6+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Display info about istrong samples\n",
    "istrong_samples = sample_info[sample_info[\"Group\"] == \"istrong\"]\n",
    "print(\"\\nistrong samples:\")\n",
    "print(istrong_samples.head())\n",
    "print(\"Number of iweak samples:\", len(istrong_samples))\n",
    "# Display info about iweak samples\n",
    "print(\"iweak samples:\")\n",
    "print(istrong_samples.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b78e35f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "istrong column mask (first 10):\n",
      "[False False False False False False False False False False]\n",
      "Number of istrong columns in istrong column mask: 37\n",
      "\n",
      "istrong column mask (first 30): [False False False False False False False False False False False False\n",
      " False False False False False False False False False False False False\n",
      " False False False False False False]\n",
      "First 30 columns of istrong: Index(['SH_TS_BC119', 'SH_TS_BC150', 'SH_TS_BC151', 'SH_TS_BC153',\n",
      "       'SH_TS_BC165', 'SH_TS_BC166', 'SH_TS_BC170', 'SH_TS_BC171',\n",
      "       'SH_TS_BC175', 'SH_TS_BC177', 'SH_TS_BC178', 'SH_TS_BC180',\n",
      "       'SH_TS_BC182', 'SH_TS_BC188', 'SH_TS_BC193', 'SH_TS_BC199',\n",
      "       'SH_TS_BC202', 'SH_TS_BC204', 'SH_TS_BC209', 'SH_TS_BC211',\n",
      "       'SH_TS_BC219', 'SH_TS_BC233', 'SH_TS_BC235', 'SH_TS_BC240',\n",
      "       'SH_TS_BC249', 'SH_TS_BC252', 'SH_TS_BC255', 'SH_TS_BC265',\n",
      "       'SH_TS_BC266', 'SH_TS_BC272'],\n",
      "      dtype='object')       \n",
      " Total number of istrong columns: 37\n"
     ]
    }
   ],
   "source": [
    "istrong_cols = count_matrix.columns.isin(istrong_samples[\"Sample\"])\n",
    "print(\"istrong column mask (first 10):\")\n",
    "print(istrong_cols[:10])\n",
    "print(\"Number of istrong columns in istrong column mask:\", istrong_cols.sum())\n",
    "\n",
    "print(\"\\nistrong column mask (first 30):\", istrong_cols[:30])\n",
    "print(\n",
    "    f\"First 30 columns of istrong: {count_matrix.columns[istrong_cols][:30]} \\\n",
    "      \\n Total number of istrong columns: {len(count_matrix.columns[istrong_cols])}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6aa1a158",
   "metadata": {},
   "source": [
    "## 3. **Data Preprocessing**\n",
    "\n",
    "* Convert count matrix to numeric values\n",
    "* Apply log2 transformation: log2(counts + 1)\n",
    "\n",
    "**Convert cm to log scale:**\n",
    "\n",
    "* Gene expression count data often contains zeros (genes that weren't detected)\n",
    "* Since log₂(0) is mathematically undefined (negative infinity), we add 1 to every value\n",
    "* This is called a \"pseudo-count\" approach, creating what's known as \"log₂(counts+1)\"\n",
    "* Differences in log space correspond to fold changes in original space\n",
    "  * A difference of 1 in log₂ space = a 2-fold change in original counts\n",
    "  * A difference of 2 in log₂ space = a 4-fold change in original counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b6a739f",
   "metadata": {},
   "source": [
    "### Convert count matrix to numeric values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ffeb7a0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 80 entries, ACTR3B to VEGFA\n",
      "Columns: 483 entries, SH_TS_BC_C1 to UNC_TGS_BC_Y90_R1\n",
      "dtypes: float64(483)\n",
      "memory usage: 302.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# Convert count matrix to numeric values\n",
    "count_matrix = count_matrix.astype(float, errors=\"raise\")\n",
    "count_matrix.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cbeaf10e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counts of zeros in each column:\n",
      "SH_TS_BC_C1          0\n",
      "SH_TS_BC_C11         0\n",
      "SH_TS_BC_C15         0\n",
      "SH_TS_BC_C3          3\n",
      "SH_TS_BC01           5\n",
      "                    ..\n",
      "UNC_TGS_BC_9m        1\n",
      "UNC_TGS_BC_Y23       4\n",
      "UNC_TGS_BC_Y23_R1    9\n",
      "UNC_TGS_BC_Y90       2\n",
      "UNC_TGS_BC_Y90_R1    3\n",
      "Length: 483, dtype: int64\n",
      "Total zeros in count matrix: 3150\n"
     ]
    }
   ],
   "source": [
    "print(\"Counts of zeros in each column:\")\n",
    "print(count_matrix.apply(lambda x: x == 0, axis=0).sum(axis=0))\n",
    "print(\n",
    "    \"Total zeros in count matrix:\",\n",
    "    count_matrix.apply(lambda x: x == 0, axis=0).sum(axis=0).sum(),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cda206b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NumPy matrix shape: (80, 483)\n",
      "Counts of zeros in each column: [ 0  0  0  3  5  4  3  2  6  6  2  4  4  4  1  4  0  0  8  0 16  1  0  1\n",
      "  3 37  2  4  2  4  4  1  2  2  3  3  2  6 17 10 11  5  8  2  3  0  1  1\n",
      "  5  3  4  2  2  4  1  1 18  2  4  1  8  0  0  3  1  1  5  6  2  3  6  4\n",
      "  6 24 15  4  7 36  3 18 10 28  2 20  2  7  3  3  2  9 18  3  3  4  8  1\n",
      " 11  3  5 13  6 20  6 16 17  3 17  2  6  2  5 18  9  3 14  2 13  2  0  0\n",
      "  0  1  3  8 11  1  8 17  2  4  6 17 19 12  5 21  3 36  2  1  2  5 32  1\n",
      "  0  1  0  1  0  7  2  1  1  6 11  1  1  0  3  7  0  2  9 11  6  5  4  1\n",
      " 16  6  6  1  1  1  2  2  3  1  3  0  2  1  3  1  1  2  3  6  4  2 34  1\n",
      "  1  2  2 12 24 20  3  2 13  2  2 21 10  1  8  3 18 19  4 23 35  1  2  3\n",
      " 10  1  0  0  6  8  0  0  1  1  0  1  1  1  1  1  2 15  4  6  2 12  3 11\n",
      "  3  3 17  8  8  1 14  6 18  7  0  1 16  8 16  3  7  6  6 13 24 15  3  6\n",
      " 15  1  0  2  1 16  1  9  2  1  1  0  0  2  9  0  0  4  1  0 11  1 10  3\n",
      "  0  7  0  3  0  2 24  2  8  1  2  0 18  4 17 26 22  9 20 21  1  7 10  2\n",
      " 13  1 23  5 17  8  7 19 13 28 25 24 21 11  4  4  3 15  9  2 12 11 16  1\n",
      "  0  8  7  9 11 12  6  5  0  7 14 12  7 22  4  7 13 19 13  6  0  3  2 15\n",
      " 11  6  1 11  0  8  9  3  9 19  1  5  5  7  1  4  6  5  7  2  3  2  5  7\n",
      " 13 17  0  1  6  4  0  0  1  2  3  9  2  8 11  2 36  7  1  0  3  8  2  0\n",
      "  2 24  4  6 10  2  1  3 12  8  7  6 23  1 10  3  0 15  3 12  3  6  2  8\n",
      "  8 26 21 13  8  5 16 18 19  9  2  3  2  4  3  2  2  9  1  1  0 21  1  1\n",
      "  1  0  0  1  2  1  1  6  1  1  0  6  5  2  2  8  1  4  2  4  2  4  1  4\n",
      "  9  2  3]\n",
      "Total Counts of zeros in matrix: 3150\n"
     ]
    }
   ],
   "source": [
    "np_matrix = np.array(count_matrix.iloc[:, :])\n",
    "print(\"NumPy matrix shape:\", np_matrix.shape)\n",
    "print(\"Counts of zeros in each column:\", (np_matrix == 0).sum(axis=0))\n",
    "print(\"Total Counts of zeros in matrix:\", (np_matrix == 0).sum(axis=0).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "475f8488",
   "metadata": {},
   "source": [
    "### Apply log2 transformation: log2(counts + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bb40cc70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Log2 transformed count matrix (first 5 rows & columns):\n",
      "           SH_TS_BC_C1  SH_TS_BC_C11  SH_TS_BC_C15  SH_TS_BC_C3  SH_TS_BC01\n",
      "Gene                                                                      \n",
      "ACTR3B       4.700440      9.129283      7.857981     5.491853    4.584963\n",
      "ANLN         7.442943     11.273796      9.792790     8.326429    2.807355\n",
      "APOBEC3G     6.845490     13.104435     11.441907     9.071462    5.584963\n",
      "AURKA        9.292322     12.871328     11.466586     9.142107    3.906891\n",
      "BAG1         8.312883     12.538674     11.203348     8.108524    4.754888\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 80 entries, ACTR3B to VEGFA\n",
      "Columns: 483 entries, SH_TS_BC_C1 to UNC_TGS_BC_Y90_R1\n",
      "dtypes: float64(483)\n",
      "memory usage: 302.5+ KB\n",
      "Log2 transformed count matrix info:\n",
      " None\n",
      "Log2 transformed count matrix descriptive statistics (first 5 samples):\n",
      "        SH_TS_BC_C1  SH_TS_BC_C11  SH_TS_BC_C15  SH_TS_BC_C3  SH_TS_BC01\n",
      "count    80.000000     80.000000     80.000000    80.000000   80.000000\n",
      "mean      7.777790     12.376603     10.938512     8.774008    4.519537\n",
      "std       2.917182      2.540082      2.458104     2.686284    2.755204\n",
      "min       1.000000      3.807355      2.807355     0.000000    0.000000\n",
      "25%       5.894663     10.780910      9.436778     7.698564    2.241446\n",
      "50%       8.049386     12.419880     10.895191     9.049684    4.523562\n",
      "75%       9.732161     13.931187     12.398038    10.158550    6.661454\n",
      "max      13.957918     17.866844     16.286919    13.597820   11.200286\n"
     ]
    }
   ],
   "source": [
    "# Convert count_matrix to log2\n",
    "count_matrix_log2 = count_matrix.apply(lambda x: np.log2(x + 1), axis=0)\n",
    "print(\n",
    "    \"Log2 transformed count matrix (first 5 rows & columns):\\n\",\n",
    "    count_matrix_log2.iloc[:5, :5],\n",
    ")\n",
    "print(\"Log2 transformed count matrix info:\\n\", count_matrix_log2.info())\n",
    "print(\n",
    "    \"Log2 transformed count matrix descriptive statistics (first 5 samples):\\n\",\n",
    "    count_matrix_log2.iloc[:, :5].describe(),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89c5b383",
   "metadata": {},
   "source": [
    "### 4. **Statistical Analysis**\n",
    "   - Calculate mean and std for each gene within each group\n",
    "   - Compute Z-scores within each sample group\n",
    "   - Calculate Z-score differences between groups & SD of the Z-score difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e2f2c657",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iweak_cols mask: [False False False False False False False False False False]       \n",
      "istrong_cols mask: [False False False False False False False False False False]       \n",
      "Total number of iweak columns: 54       \n",
      "Total number of istrong columns: 37\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    f\"iweak_cols mask: {iweak_cols[:10]} \\\n",
    "      \\nistrong_cols mask: {istrong_cols[:10]} \\\n",
    "      \\nTotal number of iweak columns: {len(count_matrix_log2.columns[iweak_cols])} \\\n",
    "      \\nTotal number of istrong columns: {len(count_matrix_log2.columns[istrong_cols])}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f807bd60",
   "metadata": {},
   "source": [
    "#### Calculate mean and std for each gene within each group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5ad9136b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean log2 value for iweak samples (first 5 rows):\n",
      " Gene\n",
      "ACTR3B      7.860318\n",
      "ANLN        8.870121\n",
      "APOBEC3G    8.839295\n",
      "AURKA       9.873015\n",
      "BAG1        8.818064\n",
      "dtype: float64\n",
      "Mean log2 value for istrong samples (first 5 rows):\n",
      " Gene\n",
      "ACTR3B       6.994971\n",
      "ANLN         6.953521\n",
      "APOBEC3G    10.527763\n",
      "AURKA        9.192108\n",
      "BAG1         9.029261\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Mean log2 value for iweak and istrong samples\n",
    "mean_iweak = count_matrix_log2.iloc[:, iweak_cols].mean(axis=1)\n",
    "mean_istrong = count_matrix_log2.iloc[:, istrong_cols].mean(axis=1)\n",
    "print(\"Mean log2 value for iweak samples (first 5 rows):\\n\", mean_iweak.head())\n",
    "print(\"Mean log2 value for istrong samples (first 5 rows):\\n\", mean_istrong.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c0c74b8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standard deviation log2 value for iweak samples (first 5 rows):\n",
      " Gene\n",
      "ACTR3B      1.995958\n",
      "ANLN        1.554415\n",
      "APOBEC3G    2.074605\n",
      "AURKA       1.191852\n",
      "BAG1        2.199874\n",
      "dtype: float64\n",
      "Standard deviation log2 value for istrong samples (first 5 rows):\n",
      " Gene\n",
      "ACTR3B      2.319413\n",
      "ANLN        2.843593\n",
      "APOBEC3G    1.321013\n",
      "AURKA       2.242906\n",
      "BAG1        2.019663\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Mean log2 value for iweak and istrong samples\n",
    "std_iweak = count_matrix_log2.iloc[:, iweak_cols].std(axis=1)\n",
    "std_istrong = count_matrix_log2.iloc[:, istrong_cols].std(axis=1)\n",
    "print(\n",
    "    \"Standard deviation log2 value for iweak samples (first 5 rows):\\n\",\n",
    "    std_iweak.head(),\n",
    ")\n",
    "print(\n",
    "    \"Standard deviation log2 value for istrong samples (first 5 rows):\\n\",\n",
    "    std_istrong.head(),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b41c121f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(80, 483) (80,)\n"
     ]
    }
   ],
   "source": [
    "print(count_matrix_log2.shape, mean_iweak.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a37b2937",
   "metadata": {},
   "source": [
    "#### Compute Z-scores within each sample group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8bed11f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z-scores for iweak samples (first 5 rows):\n",
      "\n",
      "          SH_TS_BC111  SH_TS_BC112  SH_TS_BC113  SH_TS_BC133  SH_TS_BC134\n",
      "Gene                                                                     \n",
      "ACTR3B      -0.798379    -0.735487    -0.920836     0.458160    -0.943426\n",
      "ANLN        -1.188713    -2.057170     0.161741     0.227662    -5.063077\n",
      "APOBEC3G    -4.260712     0.307752    -0.569305     0.264495    -1.499743\n",
      "AURKA       -1.109424    -1.367487     0.168751     1.121313    -2.346097\n",
      "BAG1        -4.008440    -0.285580    -0.185771     0.582435    -1.021972\n"
     ]
    }
   ],
   "source": [
    "# Calculate Z-scores for iweak samples\n",
    "## Numpy like operations\n",
    "z_iweak = (\n",
    "    count_matrix_log2.iloc[:, iweak_cols] - mean_iweak.values.reshape(-1, 1)\n",
    ") / std_iweak.values.reshape(-1, 1)\n",
    "print(\"Z-scores for iweak samples (first 5 rows):\\n\")\n",
    "print(z_iweak.iloc[:5, :5])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4185829d",
   "metadata": {},
   "source": [
    "**Z-score calculation using pandas built-in `sub` and `div` functions:**\n",
    "\n",
    "***`sub()` and `div()`:***\n",
    "\n",
    "* `.sub()`: is pandas' method to perform element-wise subtraction\n",
    "* `.div()`: is pandas' method to perform element-wise division\n",
    "* Accepts a value, series, dataframe to subtract\n",
    "* `axis=` - specify the axis along which to perform the operation\n",
    "* This is the preferred method as it is more readable and less error-prone\n",
    "\n",
    "***Note:***\n",
    "When you perform operations like subtraction using the sub() method, pandas typically follows its broadcasting rules to align indices. This can sometimes lead to unintended behavior if the shapes of the Series or DataFrames don't match."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c5956f6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z-scores for iweak samples (first 5 rows):\n",
      "           SH_TS_BC111  SH_TS_BC112  SH_TS_BC113  SH_TS_BC133  SH_TS_BC134\n",
      "Gene                                                                     \n",
      "ACTR3B      -0.798379    -0.735487    -0.920836     0.458160    -0.943426\n",
      "ANLN        -1.188713    -2.057170     0.161741     0.227662    -5.063077\n",
      "APOBEC3G    -4.260712     0.307752    -0.569305     0.264495    -1.499743\n",
      "AURKA       -1.109424    -1.367487     0.168751     1.121313    -2.346097\n",
      "BAG1        -4.008440    -0.285580    -0.185771     0.582435    -1.021972\n",
      "\n",
      " Z-scores for iweak samples Rows (Genes) and Columns (samples): (80, 54)\n"
     ]
    }
   ],
   "source": [
    "# Calculate Z-scores for iweak samples, using `sub` and `div`\n",
    "\n",
    "z_iweak = (\n",
    "    count_matrix_log2.iloc[:, iweak_cols].sub(mean_iweak, axis=0).div(std_iweak, axis=0)\n",
    ")\n",
    "print(\"Z-scores for iweak samples (first 5 rows):\\n\", z_iweak.iloc[:5, :5])\n",
    "print(\n",
    "    \"\\n Z-scores for iweak samples Rows (Genes) and Columns (samples):\", z_iweak.shape\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "28470c93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z-scores for iweak samples (first 5 rows):\n",
      "           SH_TS_BC119  SH_TS_BC150  SH_TS_BC151  SH_TS_BC153  SH_TS_BC165\n",
      "Gene                                                                     \n",
      "ACTR3B       0.251123     0.745681     0.473303     1.138150     0.310111\n",
      "ANLN         0.963558    -0.046892     0.846965     1.049066     0.320252\n",
      "APOBEC3G     0.135300     0.285290     1.097819     1.213074     0.762314\n",
      "AURKA        0.438189     0.594938     0.731543     0.743076     0.704167\n",
      "BAG1         0.293509     1.148990     0.992325     0.364224    -0.072595\n",
      "\n",
      " Z-scores for iweak samples Rows (Genes) and Columns (samples): (80, 37)\n"
     ]
    }
   ],
   "source": [
    "# Calculate Z-scores for istrong samples, using `sub` and `div`\n",
    "\n",
    "z_istrong = (\n",
    "    count_matrix_log2.iloc[:, istrong_cols]\n",
    "    .sub(mean_istrong, axis=0)\n",
    "    .div(std_istrong, axis=0)\n",
    ")\n",
    "print(\"Z-scores for iweak samples (first 5 rows):\\n\", z_istrong.iloc[:5, :5])\n",
    "print(\n",
    "    \"\\n Z-scores for iweak samples Rows (Genes) and Columns (samples):\", z_istrong.shape\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4b651ed",
   "metadata": {},
   "source": [
    "#### Calculate Z-score differences between groups & SD of the Z-score difference\n",
    "\n",
    "1. Calculate mean z-score for each gene in two groups\n",
    "2. Calculate z-score difference of each group\n",
    "3. Calculate the SD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6d7a21cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of z_diff: (80,)\n",
      "Z-score difference (istrong - iweak) (first 5 rows):\n",
      " Gene\n",
      "ACTR3B      1.345857e-15\n",
      "ANLN       -1.994845e-17\n",
      "APOBEC3G   -7.123653e-16\n",
      "AURKA      -4.685386e-16\n",
      "BAG1        1.760576e-15\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculate mean z-score for each gene in two groups\n",
    "# Calcualte z-score difference of each group\n",
    "\n",
    "z_diff = z_istrong.mean(axis=1) - z_iweak.mean(axis=1)\n",
    "print(\"Shape of z_diff:\", z_diff.shape)\n",
    "print(\"Z-score difference (istrong - iweak) (first 5 rows):\\n\", z_diff.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "48374ff5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of z_diff_std: <class 'numpy.float64'>\n",
      "Standard deviation of z-score difference: 1.4956431674223958e-15\n"
     ]
    }
   ],
   "source": [
    "# SD of z-score difference\n",
    "z_diff_std = z_diff.std()\n",
    "print(\"Type of z_diff_std:\", type(z_diff_std))\n",
    "print(\"Standard deviation of z-score difference:\", z_diff_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7490ac48",
   "metadata": {},
   "source": [
    "### 5. **Ranking Genes**\n",
    "\n",
    "* Calculate Z-ratio: difference / std_difference\n",
    "* Rank genes by Z-ratio (highest to lowest)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1520116",
   "metadata": {},
   "source": [
    "#### Calculate Z-ratio: Z-score difference / std_difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86699fb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of z_score_ratios: (80,)\n",
      "Z-score ratios (istrong - iweak) (first 5 rows):\n",
      " Gene\n",
      "ACTR3B      0.899852\n",
      "ANLN       -0.013338\n",
      "APOBEC3G   -0.476294\n",
      "AURKA      -0.313269\n",
      "BAG1        1.177136\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "z_score_ratios = z_diff / z_diff_std\n",
    "print(\"Shape of z_score_ratios:\", z_score_ratios.shape)\n",
    "print(\"Z-score ratios (istrong - iweak) (first 5 rows):\\n\", z_score_ratios.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "224b5f30",
   "metadata": {},
   "source": [
    "#### Rank genes by Z-ratio (highest to lowest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b965cf7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gene\n",
       "GAPDH      3.143055\n",
       "CCL5       2.748459\n",
       "CD68       2.222521\n",
       "HLA-DMA    2.007418\n",
       "MKI67      1.917063\n",
       "             ...   \n",
       "MDM2      -1.469024\n",
       "UBE2C     -1.492727\n",
       "PSMC4     -1.776938\n",
       "TYMS      -2.403611\n",
       "NUF2      -2.414980\n",
       "Length: 80, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z_score_ratios.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0b081944",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Z-score ratios (istrong - iweak)'}, xlabel='Genes', ylabel='Z-score ratios'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "z_score_ratios.sort_values(ascending=False).plot(\n",
    "    kind=\"bar\",\n",
    "    figsize=(20, 5),\n",
    "    title=\"Z-score ratios (istrong - iweak)\",\n",
    "    xlabel=\"Genes\",\n",
    "    ylabel=\"Z-score ratios\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cff5f603",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
